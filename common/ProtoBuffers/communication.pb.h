// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto;
namespace communication {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_GetRequest;
class Request_GetRequestDefaultTypeInternal;
extern Request_GetRequestDefaultTypeInternal _Request_GetRequest_default_instance_;
class Request_SetRequest;
class Request_SetRequestDefaultTypeInternal;
extern Request_SetRequestDefaultTypeInternal _Request_SetRequest_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_GetResponse;
class Response_GetResponseDefaultTypeInternal;
extern Response_GetResponseDefaultTypeInternal _Response_GetResponse_default_instance_;
class Response_SetResponse;
class Response_SetResponseDefaultTypeInternal;
extern Response_SetResponseDefaultTypeInternal _Response_SetResponse_default_instance_;
class Response_StatsResponse;
class Response_StatsResponseDefaultTypeInternal;
extern Response_StatsResponseDefaultTypeInternal _Response_StatsResponse_default_instance_;
}  // namespace communication
PROTOBUF_NAMESPACE_OPEN
template<> ::communication::Request* Arena::CreateMaybeMessage<::communication::Request>(Arena*);
template<> ::communication::Request_GetRequest* Arena::CreateMaybeMessage<::communication::Request_GetRequest>(Arena*);
template<> ::communication::Request_SetRequest* Arena::CreateMaybeMessage<::communication::Request_SetRequest>(Arena*);
template<> ::communication::Response* Arena::CreateMaybeMessage<::communication::Response>(Arena*);
template<> ::communication::Response_GetResponse* Arena::CreateMaybeMessage<::communication::Response_GetResponse>(Arena*);
template<> ::communication::Response_SetResponse* Arena::CreateMaybeMessage<::communication::Response_SetResponse>(Arena*);
template<> ::communication::Response_StatsResponse* Arena::CreateMaybeMessage<::communication::Response_StatsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace communication {

enum Request_TypeOfRequest : int {
  Request_TypeOfRequest_GET_REQUEST = 0,
  Request_TypeOfRequest_SET_REQUEST = 1,
  Request_TypeOfRequest_STATS_REQUEST = 2,
  Request_TypeOfRequest_Request_TypeOfRequest_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_TypeOfRequest_Request_TypeOfRequest_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_TypeOfRequest_IsValid(int value);
constexpr Request_TypeOfRequest Request_TypeOfRequest_TypeOfRequest_MIN = Request_TypeOfRequest_GET_REQUEST;
constexpr Request_TypeOfRequest Request_TypeOfRequest_TypeOfRequest_MAX = Request_TypeOfRequest_STATS_REQUEST;
constexpr int Request_TypeOfRequest_TypeOfRequest_ARRAYSIZE = Request_TypeOfRequest_TypeOfRequest_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_TypeOfRequest_descriptor();
template<typename T>
inline const std::string& Request_TypeOfRequest_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_TypeOfRequest>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_TypeOfRequest_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_TypeOfRequest_descriptor(), enum_t_value);
}
inline bool Request_TypeOfRequest_Parse(
    const std::string& name, Request_TypeOfRequest* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_TypeOfRequest>(
    Request_TypeOfRequest_descriptor(), name, value);
}
enum Response_TypeOfResponse : int {
  Response_TypeOfResponse_GET_RESPONSE = 0,
  Response_TypeOfResponse_SET_RESPONSE = 1,
  Response_TypeOfResponse_STATS_RESPONSE = 2,
  Response_TypeOfResponse_Response_TypeOfResponse_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_TypeOfResponse_Response_TypeOfResponse_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_TypeOfResponse_IsValid(int value);
constexpr Response_TypeOfResponse Response_TypeOfResponse_TypeOfResponse_MIN = Response_TypeOfResponse_GET_RESPONSE;
constexpr Response_TypeOfResponse Response_TypeOfResponse_TypeOfResponse_MAX = Response_TypeOfResponse_STATS_RESPONSE;
constexpr int Response_TypeOfResponse_TypeOfResponse_ARRAYSIZE = Response_TypeOfResponse_TypeOfResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_TypeOfResponse_descriptor();
template<typename T>
inline const std::string& Response_TypeOfResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_TypeOfResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_TypeOfResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_TypeOfResponse_descriptor(), enum_t_value);
}
inline bool Response_TypeOfResponse_Parse(
    const std::string& name, Response_TypeOfResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_TypeOfResponse>(
    Response_TypeOfResponse_descriptor(), name, value);
}
// ===================================================================

class Request_GetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Request.GetRequest) */ {
 public:
  inline Request_GetRequest() : Request_GetRequest(nullptr) {};
  virtual ~Request_GetRequest();

  Request_GetRequest(const Request_GetRequest& from);
  Request_GetRequest(Request_GetRequest&& from) noexcept
    : Request_GetRequest() {
    *this = ::std::move(from);
  }

  inline Request_GetRequest& operator=(const Request_GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetRequest& operator=(Request_GetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_GetRequest* internal_default_instance() {
    return reinterpret_cast<const Request_GetRequest*>(
               &_Request_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request_GetRequest& a, Request_GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetRequest* New() const final {
    return CreateMaybeMessage<Request_GetRequest>(nullptr);
  }

  Request_GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_GetRequest& from);
  void MergeFrom(const Request_GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Request.GetRequest";
  }
  protected:
  explicit Request_GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:communication.Request.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Request_SetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Request.SetRequest) */ {
 public:
  inline Request_SetRequest() : Request_SetRequest(nullptr) {};
  virtual ~Request_SetRequest();

  Request_SetRequest(const Request_SetRequest& from);
  Request_SetRequest(Request_SetRequest&& from) noexcept
    : Request_SetRequest() {
    *this = ::std::move(from);
  }

  inline Request_SetRequest& operator=(const Request_SetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_SetRequest& operator=(Request_SetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_SetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_SetRequest* internal_default_instance() {
    return reinterpret_cast<const Request_SetRequest*>(
               &_Request_SetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request_SetRequest& a, Request_SetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_SetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_SetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_SetRequest* New() const final {
    return CreateMaybeMessage<Request_SetRequest>(nullptr);
  }

  Request_SetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_SetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_SetRequest& from);
  void MergeFrom(const Request_SetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_SetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Request.SetRequest";
  }
  protected:
  explicit Request_SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:communication.Request.SetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_GetRequest GetRequest;
  typedef Request_SetRequest SetRequest;

  typedef Request_TypeOfRequest TypeOfRequest;
  static constexpr TypeOfRequest GET_REQUEST =
    Request_TypeOfRequest_GET_REQUEST;
  static constexpr TypeOfRequest SET_REQUEST =
    Request_TypeOfRequest_SET_REQUEST;
  static constexpr TypeOfRequest STATS_REQUEST =
    Request_TypeOfRequest_STATS_REQUEST;
  static inline bool TypeOfRequest_IsValid(int value) {
    return Request_TypeOfRequest_IsValid(value);
  }
  static constexpr TypeOfRequest TypeOfRequest_MIN =
    Request_TypeOfRequest_TypeOfRequest_MIN;
  static constexpr TypeOfRequest TypeOfRequest_MAX =
    Request_TypeOfRequest_TypeOfRequest_MAX;
  static constexpr int TypeOfRequest_ARRAYSIZE =
    Request_TypeOfRequest_TypeOfRequest_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeOfRequest_descriptor() {
    return Request_TypeOfRequest_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeOfRequest_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeOfRequest>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeOfRequest_Name.");
    return Request_TypeOfRequest_Name(enum_t_value);
  }
  static inline bool TypeOfRequest_Parse(const std::string& name,
      TypeOfRequest* value) {
    return Request_TypeOfRequest_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGetFieldNumber = 2,
    kSetFieldNumber = 3,
    kRequestTypeFieldNumber = 1,
  };
  // .communication.Request.GetRequest get = 2;
  bool has_get() const;
  private:
  bool _internal_has_get() const;
  public:
  void clear_get();
  const ::communication::Request_GetRequest& get() const;
  ::communication::Request_GetRequest* release_get();
  ::communication::Request_GetRequest* mutable_get();
  void set_allocated_get(::communication::Request_GetRequest* get);
  private:
  const ::communication::Request_GetRequest& _internal_get() const;
  ::communication::Request_GetRequest* _internal_mutable_get();
  public:
  void unsafe_arena_set_allocated_get(
      ::communication::Request_GetRequest* get);
  ::communication::Request_GetRequest* unsafe_arena_release_get();

  // .communication.Request.SetRequest set = 3;
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  const ::communication::Request_SetRequest& set() const;
  ::communication::Request_SetRequest* release_set();
  ::communication::Request_SetRequest* mutable_set();
  void set_allocated_set(::communication::Request_SetRequest* set);
  private:
  const ::communication::Request_SetRequest& _internal_set() const;
  ::communication::Request_SetRequest* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::communication::Request_SetRequest* set);
  ::communication::Request_SetRequest* unsafe_arena_release_set();

  // .communication.Request.TypeOfRequest requestType = 1;
  void clear_requesttype();
  ::communication::Request_TypeOfRequest requesttype() const;
  void set_requesttype(::communication::Request_TypeOfRequest value);
  private:
  ::communication::Request_TypeOfRequest _internal_requesttype() const;
  void _internal_set_requesttype(::communication::Request_TypeOfRequest value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::communication::Request_GetRequest* get_;
  ::communication::Request_SetRequest* set_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Response_GetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Response.GetResponse) */ {
 public:
  inline Response_GetResponse() : Response_GetResponse(nullptr) {};
  virtual ~Response_GetResponse();

  Response_GetResponse(const Response_GetResponse& from);
  Response_GetResponse(Response_GetResponse&& from) noexcept
    : Response_GetResponse() {
    *this = ::std::move(from);
  }

  inline Response_GetResponse& operator=(const Response_GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetResponse& operator=(Response_GetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response_GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_GetResponse* internal_default_instance() {
    return reinterpret_cast<const Response_GetResponse*>(
               &_Response_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response_GetResponse& a, Response_GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetResponse* New() const final {
    return CreateMaybeMessage<Response_GetResponse>(nullptr);
  }

  Response_GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_GetResponse& from);
  void MergeFrom(const Response_GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_GetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Response.GetResponse";
  }
  protected:
  explicit Response_GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Response.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Response_SetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Response.SetResponse) */ {
 public:
  inline Response_SetResponse() : Response_SetResponse(nullptr) {};
  virtual ~Response_SetResponse();

  Response_SetResponse(const Response_SetResponse& from);
  Response_SetResponse(Response_SetResponse&& from) noexcept
    : Response_SetResponse() {
    *this = ::std::move(from);
  }

  inline Response_SetResponse& operator=(const Response_SetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_SetResponse& operator=(Response_SetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response_SetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_SetResponse* internal_default_instance() {
    return reinterpret_cast<const Response_SetResponse*>(
               &_Response_SetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response_SetResponse& a, Response_SetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_SetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_SetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_SetResponse* New() const final {
    return CreateMaybeMessage<Response_SetResponse>(nullptr);
  }

  Response_SetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_SetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_SetResponse& from);
  void MergeFrom(const Response_SetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_SetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Response.SetResponse";
  }
  protected:
  explicit Response_SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailureMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string failure_message = 2;
  void clear_failure_message();
  const std::string& failure_message() const;
  void set_failure_message(const std::string& value);
  void set_failure_message(std::string&& value);
  void set_failure_message(const char* value);
  void set_failure_message(const char* value, size_t size);
  std::string* mutable_failure_message();
  std::string* release_failure_message();
  void set_allocated_failure_message(std::string* failure_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_failure_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_failure_message(
      std::string* failure_message);
  private:
  const std::string& _internal_failure_message() const;
  void _internal_set_failure_message(const std::string& value);
  std::string* _internal_mutable_failure_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Response.SetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failure_message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Response_StatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Response.StatsResponse) */ {
 public:
  inline Response_StatsResponse() : Response_StatsResponse(nullptr) {};
  virtual ~Response_StatsResponse();

  Response_StatsResponse(const Response_StatsResponse& from);
  Response_StatsResponse(Response_StatsResponse&& from) noexcept
    : Response_StatsResponse() {
    *this = ::std::move(from);
  }

  inline Response_StatsResponse& operator=(const Response_StatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_StatsResponse& operator=(Response_StatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response_StatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_StatsResponse* internal_default_instance() {
    return reinterpret_cast<const Response_StatsResponse*>(
               &_Response_StatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Response_StatsResponse& a, Response_StatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_StatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_StatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_StatsResponse* New() const final {
    return CreateMaybeMessage<Response_StatsResponse>(nullptr);
  }

  Response_StatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_StatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_StatsResponse& from);
  void MergeFrom(const Response_StatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_StatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Response.StatsResponse";
  }
  protected:
  explicit Response_StatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNrOfGetOperationsFieldNumber = 1,
    kSuccessfulGetOperationsFieldNumber = 2,
    kFailedGetOperationsFieldNumber = 3,
  };
  // uint32 nr_of_get_operations = 1;
  void clear_nr_of_get_operations();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_of_get_operations() const;
  void set_nr_of_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nr_of_get_operations() const;
  void _internal_set_nr_of_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 successful_get_operations = 2;
  void clear_successful_get_operations();
  ::PROTOBUF_NAMESPACE_ID::uint32 successful_get_operations() const;
  void set_successful_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_successful_get_operations() const;
  void _internal_set_successful_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 failed_get_operations = 3;
  void clear_failed_get_operations();
  ::PROTOBUF_NAMESPACE_ID::uint32 failed_get_operations() const;
  void set_failed_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_failed_get_operations() const;
  void _internal_set_failed_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Response.StatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_of_get_operations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 successful_get_operations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 failed_get_operations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Response_GetResponse GetResponse;
  typedef Response_SetResponse SetResponse;
  typedef Response_StatsResponse StatsResponse;

  typedef Response_TypeOfResponse TypeOfResponse;
  static constexpr TypeOfResponse GET_RESPONSE =
    Response_TypeOfResponse_GET_RESPONSE;
  static constexpr TypeOfResponse SET_RESPONSE =
    Response_TypeOfResponse_SET_RESPONSE;
  static constexpr TypeOfResponse STATS_RESPONSE =
    Response_TypeOfResponse_STATS_RESPONSE;
  static inline bool TypeOfResponse_IsValid(int value) {
    return Response_TypeOfResponse_IsValid(value);
  }
  static constexpr TypeOfResponse TypeOfResponse_MIN =
    Response_TypeOfResponse_TypeOfResponse_MIN;
  static constexpr TypeOfResponse TypeOfResponse_MAX =
    Response_TypeOfResponse_TypeOfResponse_MAX;
  static constexpr int TypeOfResponse_ARRAYSIZE =
    Response_TypeOfResponse_TypeOfResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeOfResponse_descriptor() {
    return Response_TypeOfResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeOfResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeOfResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeOfResponse_Name.");
    return Response_TypeOfResponse_Name(enum_t_value);
  }
  static inline bool TypeOfResponse_Parse(const std::string& name,
      TypeOfResponse* value) {
    return Response_TypeOfResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGetRespFieldNumber = 2,
    kSetRespFieldNumber = 3,
    kStatRespFieldNumber = 4,
    kResponseTypeFieldNumber = 1,
  };
  // .communication.Response.GetResponse getResp = 2;
  bool has_getresp() const;
  private:
  bool _internal_has_getresp() const;
  public:
  void clear_getresp();
  const ::communication::Response_GetResponse& getresp() const;
  ::communication::Response_GetResponse* release_getresp();
  ::communication::Response_GetResponse* mutable_getresp();
  void set_allocated_getresp(::communication::Response_GetResponse* getresp);
  private:
  const ::communication::Response_GetResponse& _internal_getresp() const;
  ::communication::Response_GetResponse* _internal_mutable_getresp();
  public:
  void unsafe_arena_set_allocated_getresp(
      ::communication::Response_GetResponse* getresp);
  ::communication::Response_GetResponse* unsafe_arena_release_getresp();

  // .communication.Response.SetResponse setResp = 3;
  bool has_setresp() const;
  private:
  bool _internal_has_setresp() const;
  public:
  void clear_setresp();
  const ::communication::Response_SetResponse& setresp() const;
  ::communication::Response_SetResponse* release_setresp();
  ::communication::Response_SetResponse* mutable_setresp();
  void set_allocated_setresp(::communication::Response_SetResponse* setresp);
  private:
  const ::communication::Response_SetResponse& _internal_setresp() const;
  ::communication::Response_SetResponse* _internal_mutable_setresp();
  public:
  void unsafe_arena_set_allocated_setresp(
      ::communication::Response_SetResponse* setresp);
  ::communication::Response_SetResponse* unsafe_arena_release_setresp();

  // .communication.Response.StatsResponse statResp = 4;
  bool has_statresp() const;
  private:
  bool _internal_has_statresp() const;
  public:
  void clear_statresp();
  const ::communication::Response_StatsResponse& statresp() const;
  ::communication::Response_StatsResponse* release_statresp();
  ::communication::Response_StatsResponse* mutable_statresp();
  void set_allocated_statresp(::communication::Response_StatsResponse* statresp);
  private:
  const ::communication::Response_StatsResponse& _internal_statresp() const;
  ::communication::Response_StatsResponse* _internal_mutable_statresp();
  public:
  void unsafe_arena_set_allocated_statresp(
      ::communication::Response_StatsResponse* statresp);
  ::communication::Response_StatsResponse* unsafe_arena_release_statresp();

  // .communication.Response.TypeOfResponse responseType = 1;
  void clear_responsetype();
  ::communication::Response_TypeOfResponse responsetype() const;
  void set_responsetype(::communication::Response_TypeOfResponse value);
  private:
  ::communication::Response_TypeOfResponse _internal_responsetype() const;
  void _internal_set_responsetype(::communication::Response_TypeOfResponse value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::communication::Response_GetResponse* getresp_;
  ::communication::Response_SetResponse* setresp_;
  ::communication::Response_StatsResponse* statresp_;
  int responsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request_GetRequest

// string key = 1;
inline void Request_GetRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request_GetRequest::key() const {
  // @@protoc_insertion_point(field_get:communication.Request.GetRequest.key)
  return _internal_key();
}
inline void Request_GetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:communication.Request.GetRequest.key)
}
inline std::string* Request_GetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:communication.Request.GetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& Request_GetRequest::_internal_key() const {
  return key_.Get();
}
inline void Request_GetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_GetRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:communication.Request.GetRequest.key)
}
inline void Request_GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:communication.Request.GetRequest.key)
}
inline void Request_GetRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:communication.Request.GetRequest.key)
}
inline std::string* Request_GetRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:communication.Request.GetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_GetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:communication.Request.GetRequest.key)
}
inline std::string* Request_GetRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:communication.Request.GetRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_GetRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Request.GetRequest.key)
}

// -------------------------------------------------------------------

// Request_SetRequest

// string key = 1;
inline void Request_SetRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request_SetRequest::key() const {
  // @@protoc_insertion_point(field_get:communication.Request.SetRequest.key)
  return _internal_key();
}
inline void Request_SetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:communication.Request.SetRequest.key)
}
inline std::string* Request_SetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:communication.Request.SetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& Request_SetRequest::_internal_key() const {
  return key_.Get();
}
inline void Request_SetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_SetRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:communication.Request.SetRequest.key)
}
inline void Request_SetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:communication.Request.SetRequest.key)
}
inline void Request_SetRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:communication.Request.SetRequest.key)
}
inline std::string* Request_SetRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_SetRequest::release_key() {
  // @@protoc_insertion_point(field_release:communication.Request.SetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_SetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:communication.Request.SetRequest.key)
}
inline std::string* Request_SetRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:communication.Request.SetRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_SetRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Request.SetRequest.key)
}

// string value = 2;
inline void Request_SetRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request_SetRequest::value() const {
  // @@protoc_insertion_point(field_get:communication.Request.SetRequest.value)
  return _internal_value();
}
inline void Request_SetRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:communication.Request.SetRequest.value)
}
inline std::string* Request_SetRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:communication.Request.SetRequest.value)
  return _internal_mutable_value();
}
inline const std::string& Request_SetRequest::_internal_value() const {
  return value_.Get();
}
inline void Request_SetRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request_SetRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:communication.Request.SetRequest.value)
}
inline void Request_SetRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:communication.Request.SetRequest.value)
}
inline void Request_SetRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:communication.Request.SetRequest.value)
}
inline std::string* Request_SetRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request_SetRequest::release_value() {
  // @@protoc_insertion_point(field_release:communication.Request.SetRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_SetRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:communication.Request.SetRequest.value)
}
inline std::string* Request_SetRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:communication.Request.SetRequest.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request_SetRequest::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Request.SetRequest.value)
}

// -------------------------------------------------------------------

// Request

// .communication.Request.TypeOfRequest requestType = 1;
inline void Request::clear_requesttype() {
  requesttype_ = 0;
}
inline ::communication::Request_TypeOfRequest Request::_internal_requesttype() const {
  return static_cast< ::communication::Request_TypeOfRequest >(requesttype_);
}
inline ::communication::Request_TypeOfRequest Request::requesttype() const {
  // @@protoc_insertion_point(field_get:communication.Request.requestType)
  return _internal_requesttype();
}
inline void Request::_internal_set_requesttype(::communication::Request_TypeOfRequest value) {
  
  requesttype_ = value;
}
inline void Request::set_requesttype(::communication::Request_TypeOfRequest value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:communication.Request.requestType)
}

// .communication.Request.GetRequest get = 2;
inline bool Request::_internal_has_get() const {
  return this != internal_default_instance() && get_ != nullptr;
}
inline bool Request::has_get() const {
  return _internal_has_get();
}
inline void Request::clear_get() {
  if (GetArena() == nullptr && get_ != nullptr) {
    delete get_;
  }
  get_ = nullptr;
}
inline const ::communication::Request_GetRequest& Request::_internal_get() const {
  const ::communication::Request_GetRequest* p = get_;
  return p != nullptr ? *p : *reinterpret_cast<const ::communication::Request_GetRequest*>(
      &::communication::_Request_GetRequest_default_instance_);
}
inline const ::communication::Request_GetRequest& Request::get() const {
  // @@protoc_insertion_point(field_get:communication.Request.get)
  return _internal_get();
}
inline void Request::unsafe_arena_set_allocated_get(
    ::communication::Request_GetRequest* get) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_);
  }
  get_ = get;
  if (get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Request.get)
}
inline ::communication::Request_GetRequest* Request::release_get() {
  auto temp = unsafe_arena_release_get();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::communication::Request_GetRequest* Request::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_release:communication.Request.get)
  
  ::communication::Request_GetRequest* temp = get_;
  get_ = nullptr;
  return temp;
}
inline ::communication::Request_GetRequest* Request::_internal_mutable_get() {
  
  if (get_ == nullptr) {
    auto* p = CreateMaybeMessage<::communication::Request_GetRequest>(GetArena());
    get_ = p;
  }
  return get_;
}
inline ::communication::Request_GetRequest* Request::mutable_get() {
  // @@protoc_insertion_point(field_mutable:communication.Request.get)
  return _internal_mutable_get();
}
inline void Request::set_allocated_get(::communication::Request_GetRequest* get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_;
  }
  if (get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get);
    if (message_arena != submessage_arena) {
      get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    
  } else {
    
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:communication.Request.get)
}

// .communication.Request.SetRequest set = 3;
inline bool Request::_internal_has_set() const {
  return this != internal_default_instance() && set_ != nullptr;
}
inline bool Request::has_set() const {
  return _internal_has_set();
}
inline void Request::clear_set() {
  if (GetArena() == nullptr && set_ != nullptr) {
    delete set_;
  }
  set_ = nullptr;
}
inline const ::communication::Request_SetRequest& Request::_internal_set() const {
  const ::communication::Request_SetRequest* p = set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::communication::Request_SetRequest*>(
      &::communication::_Request_SetRequest_default_instance_);
}
inline const ::communication::Request_SetRequest& Request::set() const {
  // @@protoc_insertion_point(field_get:communication.Request.set)
  return _internal_set();
}
inline void Request::unsafe_arena_set_allocated_set(
    ::communication::Request_SetRequest* set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_);
  }
  set_ = set;
  if (set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Request.set)
}
inline ::communication::Request_SetRequest* Request::release_set() {
  auto temp = unsafe_arena_release_set();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::communication::Request_SetRequest* Request::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_release:communication.Request.set)
  
  ::communication::Request_SetRequest* temp = set_;
  set_ = nullptr;
  return temp;
}
inline ::communication::Request_SetRequest* Request::_internal_mutable_set() {
  
  if (set_ == nullptr) {
    auto* p = CreateMaybeMessage<::communication::Request_SetRequest>(GetArena());
    set_ = p;
  }
  return set_;
}
inline ::communication::Request_SetRequest* Request::mutable_set() {
  // @@protoc_insertion_point(field_mutable:communication.Request.set)
  return _internal_mutable_set();
}
inline void Request::set_allocated_set(::communication::Request_SetRequest* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_;
  }
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set);
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    
  } else {
    
  }
  set_ = set;
  // @@protoc_insertion_point(field_set_allocated:communication.Request.set)
}

// -------------------------------------------------------------------

// Response_GetResponse

// bool success = 1;
inline void Response_GetResponse::clear_success() {
  success_ = false;
}
inline bool Response_GetResponse::_internal_success() const {
  return success_;
}
inline bool Response_GetResponse::success() const {
  // @@protoc_insertion_point(field_get:communication.Response.GetResponse.success)
  return _internal_success();
}
inline void Response_GetResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Response_GetResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:communication.Response.GetResponse.success)
}

// string value = 2;
inline void Response_GetResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response_GetResponse::value() const {
  // @@protoc_insertion_point(field_get:communication.Response.GetResponse.value)
  return _internal_value();
}
inline void Response_GetResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:communication.Response.GetResponse.value)
}
inline std::string* Response_GetResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:communication.Response.GetResponse.value)
  return _internal_mutable_value();
}
inline const std::string& Response_GetResponse::_internal_value() const {
  return value_.Get();
}
inline void Response_GetResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_GetResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:communication.Response.GetResponse.value)
}
inline void Response_GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:communication.Response.GetResponse.value)
}
inline void Response_GetResponse::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:communication.Response.GetResponse.value)
}
inline std::string* Response_GetResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:communication.Response.GetResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_GetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:communication.Response.GetResponse.value)
}
inline std::string* Response_GetResponse::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:communication.Response.GetResponse.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_GetResponse::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Response.GetResponse.value)
}

// -------------------------------------------------------------------

// Response_SetResponse

// bool success = 1;
inline void Response_SetResponse::clear_success() {
  success_ = false;
}
inline bool Response_SetResponse::_internal_success() const {
  return success_;
}
inline bool Response_SetResponse::success() const {
  // @@protoc_insertion_point(field_get:communication.Response.SetResponse.success)
  return _internal_success();
}
inline void Response_SetResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Response_SetResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:communication.Response.SetResponse.success)
}

// string failure_message = 2;
inline void Response_SetResponse::clear_failure_message() {
  failure_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response_SetResponse::failure_message() const {
  // @@protoc_insertion_point(field_get:communication.Response.SetResponse.failure_message)
  return _internal_failure_message();
}
inline void Response_SetResponse::set_failure_message(const std::string& value) {
  _internal_set_failure_message(value);
  // @@protoc_insertion_point(field_set:communication.Response.SetResponse.failure_message)
}
inline std::string* Response_SetResponse::mutable_failure_message() {
  // @@protoc_insertion_point(field_mutable:communication.Response.SetResponse.failure_message)
  return _internal_mutable_failure_message();
}
inline const std::string& Response_SetResponse::_internal_failure_message() const {
  return failure_message_.Get();
}
inline void Response_SetResponse::_internal_set_failure_message(const std::string& value) {
  
  failure_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response_SetResponse::set_failure_message(std::string&& value) {
  
  failure_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:communication.Response.SetResponse.failure_message)
}
inline void Response_SetResponse::set_failure_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  failure_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:communication.Response.SetResponse.failure_message)
}
inline void Response_SetResponse::set_failure_message(const char* value,
    size_t size) {
  
  failure_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:communication.Response.SetResponse.failure_message)
}
inline std::string* Response_SetResponse::_internal_mutable_failure_message() {
  
  return failure_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response_SetResponse::release_failure_message() {
  // @@protoc_insertion_point(field_release:communication.Response.SetResponse.failure_message)
  return failure_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_SetResponse::set_allocated_failure_message(std::string* failure_message) {
  if (failure_message != nullptr) {
    
  } else {
    
  }
  failure_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failure_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:communication.Response.SetResponse.failure_message)
}
inline std::string* Response_SetResponse::unsafe_arena_release_failure_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:communication.Response.SetResponse.failure_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return failure_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response_SetResponse::unsafe_arena_set_allocated_failure_message(
    std::string* failure_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (failure_message != nullptr) {
    
  } else {
    
  }
  failure_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      failure_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Response.SetResponse.failure_message)
}

// -------------------------------------------------------------------

// Response_StatsResponse

// uint32 nr_of_get_operations = 1;
inline void Response_StatsResponse::clear_nr_of_get_operations() {
  nr_of_get_operations_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_StatsResponse::_internal_nr_of_get_operations() const {
  return nr_of_get_operations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_StatsResponse::nr_of_get_operations() const {
  // @@protoc_insertion_point(field_get:communication.Response.StatsResponse.nr_of_get_operations)
  return _internal_nr_of_get_operations();
}
inline void Response_StatsResponse::_internal_set_nr_of_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nr_of_get_operations_ = value;
}
inline void Response_StatsResponse::set_nr_of_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nr_of_get_operations(value);
  // @@protoc_insertion_point(field_set:communication.Response.StatsResponse.nr_of_get_operations)
}

// uint32 successful_get_operations = 2;
inline void Response_StatsResponse::clear_successful_get_operations() {
  successful_get_operations_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_StatsResponse::_internal_successful_get_operations() const {
  return successful_get_operations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_StatsResponse::successful_get_operations() const {
  // @@protoc_insertion_point(field_get:communication.Response.StatsResponse.successful_get_operations)
  return _internal_successful_get_operations();
}
inline void Response_StatsResponse::_internal_set_successful_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  successful_get_operations_ = value;
}
inline void Response_StatsResponse::set_successful_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_successful_get_operations(value);
  // @@protoc_insertion_point(field_set:communication.Response.StatsResponse.successful_get_operations)
}

// uint32 failed_get_operations = 3;
inline void Response_StatsResponse::clear_failed_get_operations() {
  failed_get_operations_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_StatsResponse::_internal_failed_get_operations() const {
  return failed_get_operations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_StatsResponse::failed_get_operations() const {
  // @@protoc_insertion_point(field_get:communication.Response.StatsResponse.failed_get_operations)
  return _internal_failed_get_operations();
}
inline void Response_StatsResponse::_internal_set_failed_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  failed_get_operations_ = value;
}
inline void Response_StatsResponse::set_failed_get_operations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_failed_get_operations(value);
  // @@protoc_insertion_point(field_set:communication.Response.StatsResponse.failed_get_operations)
}

// -------------------------------------------------------------------

// Response

// .communication.Response.TypeOfResponse responseType = 1;
inline void Response::clear_responsetype() {
  responsetype_ = 0;
}
inline ::communication::Response_TypeOfResponse Response::_internal_responsetype() const {
  return static_cast< ::communication::Response_TypeOfResponse >(responsetype_);
}
inline ::communication::Response_TypeOfResponse Response::responsetype() const {
  // @@protoc_insertion_point(field_get:communication.Response.responseType)
  return _internal_responsetype();
}
inline void Response::_internal_set_responsetype(::communication::Response_TypeOfResponse value) {
  
  responsetype_ = value;
}
inline void Response::set_responsetype(::communication::Response_TypeOfResponse value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:communication.Response.responseType)
}

// .communication.Response.GetResponse getResp = 2;
inline bool Response::_internal_has_getresp() const {
  return this != internal_default_instance() && getresp_ != nullptr;
}
inline bool Response::has_getresp() const {
  return _internal_has_getresp();
}
inline void Response::clear_getresp() {
  if (GetArena() == nullptr && getresp_ != nullptr) {
    delete getresp_;
  }
  getresp_ = nullptr;
}
inline const ::communication::Response_GetResponse& Response::_internal_getresp() const {
  const ::communication::Response_GetResponse* p = getresp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::communication::Response_GetResponse*>(
      &::communication::_Response_GetResponse_default_instance_);
}
inline const ::communication::Response_GetResponse& Response::getresp() const {
  // @@protoc_insertion_point(field_get:communication.Response.getResp)
  return _internal_getresp();
}
inline void Response::unsafe_arena_set_allocated_getresp(
    ::communication::Response_GetResponse* getresp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getresp_);
  }
  getresp_ = getresp;
  if (getresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Response.getResp)
}
inline ::communication::Response_GetResponse* Response::release_getresp() {
  auto temp = unsafe_arena_release_getresp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::communication::Response_GetResponse* Response::unsafe_arena_release_getresp() {
  // @@protoc_insertion_point(field_release:communication.Response.getResp)
  
  ::communication::Response_GetResponse* temp = getresp_;
  getresp_ = nullptr;
  return temp;
}
inline ::communication::Response_GetResponse* Response::_internal_mutable_getresp() {
  
  if (getresp_ == nullptr) {
    auto* p = CreateMaybeMessage<::communication::Response_GetResponse>(GetArena());
    getresp_ = p;
  }
  return getresp_;
}
inline ::communication::Response_GetResponse* Response::mutable_getresp() {
  // @@protoc_insertion_point(field_mutable:communication.Response.getResp)
  return _internal_mutable_getresp();
}
inline void Response::set_allocated_getresp(::communication::Response_GetResponse* getresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getresp_;
  }
  if (getresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getresp);
    if (message_arena != submessage_arena) {
      getresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getresp, submessage_arena);
    }
    
  } else {
    
  }
  getresp_ = getresp;
  // @@protoc_insertion_point(field_set_allocated:communication.Response.getResp)
}

// .communication.Response.SetResponse setResp = 3;
inline bool Response::_internal_has_setresp() const {
  return this != internal_default_instance() && setresp_ != nullptr;
}
inline bool Response::has_setresp() const {
  return _internal_has_setresp();
}
inline void Response::clear_setresp() {
  if (GetArena() == nullptr && setresp_ != nullptr) {
    delete setresp_;
  }
  setresp_ = nullptr;
}
inline const ::communication::Response_SetResponse& Response::_internal_setresp() const {
  const ::communication::Response_SetResponse* p = setresp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::communication::Response_SetResponse*>(
      &::communication::_Response_SetResponse_default_instance_);
}
inline const ::communication::Response_SetResponse& Response::setresp() const {
  // @@protoc_insertion_point(field_get:communication.Response.setResp)
  return _internal_setresp();
}
inline void Response::unsafe_arena_set_allocated_setresp(
    ::communication::Response_SetResponse* setresp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setresp_);
  }
  setresp_ = setresp;
  if (setresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Response.setResp)
}
inline ::communication::Response_SetResponse* Response::release_setresp() {
  auto temp = unsafe_arena_release_setresp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::communication::Response_SetResponse* Response::unsafe_arena_release_setresp() {
  // @@protoc_insertion_point(field_release:communication.Response.setResp)
  
  ::communication::Response_SetResponse* temp = setresp_;
  setresp_ = nullptr;
  return temp;
}
inline ::communication::Response_SetResponse* Response::_internal_mutable_setresp() {
  
  if (setresp_ == nullptr) {
    auto* p = CreateMaybeMessage<::communication::Response_SetResponse>(GetArena());
    setresp_ = p;
  }
  return setresp_;
}
inline ::communication::Response_SetResponse* Response::mutable_setresp() {
  // @@protoc_insertion_point(field_mutable:communication.Response.setResp)
  return _internal_mutable_setresp();
}
inline void Response::set_allocated_setresp(::communication::Response_SetResponse* setresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setresp_;
  }
  if (setresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setresp);
    if (message_arena != submessage_arena) {
      setresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setresp, submessage_arena);
    }
    
  } else {
    
  }
  setresp_ = setresp;
  // @@protoc_insertion_point(field_set_allocated:communication.Response.setResp)
}

// .communication.Response.StatsResponse statResp = 4;
inline bool Response::_internal_has_statresp() const {
  return this != internal_default_instance() && statresp_ != nullptr;
}
inline bool Response::has_statresp() const {
  return _internal_has_statresp();
}
inline void Response::clear_statresp() {
  if (GetArena() == nullptr && statresp_ != nullptr) {
    delete statresp_;
  }
  statresp_ = nullptr;
}
inline const ::communication::Response_StatsResponse& Response::_internal_statresp() const {
  const ::communication::Response_StatsResponse* p = statresp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::communication::Response_StatsResponse*>(
      &::communication::_Response_StatsResponse_default_instance_);
}
inline const ::communication::Response_StatsResponse& Response::statresp() const {
  // @@protoc_insertion_point(field_get:communication.Response.statResp)
  return _internal_statresp();
}
inline void Response::unsafe_arena_set_allocated_statresp(
    ::communication::Response_StatsResponse* statresp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statresp_);
  }
  statresp_ = statresp;
  if (statresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:communication.Response.statResp)
}
inline ::communication::Response_StatsResponse* Response::release_statresp() {
  auto temp = unsafe_arena_release_statresp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::communication::Response_StatsResponse* Response::unsafe_arena_release_statresp() {
  // @@protoc_insertion_point(field_release:communication.Response.statResp)
  
  ::communication::Response_StatsResponse* temp = statresp_;
  statresp_ = nullptr;
  return temp;
}
inline ::communication::Response_StatsResponse* Response::_internal_mutable_statresp() {
  
  if (statresp_ == nullptr) {
    auto* p = CreateMaybeMessage<::communication::Response_StatsResponse>(GetArena());
    statresp_ = p;
  }
  return statresp_;
}
inline ::communication::Response_StatsResponse* Response::mutable_statresp() {
  // @@protoc_insertion_point(field_mutable:communication.Response.statResp)
  return _internal_mutable_statresp();
}
inline void Response::set_allocated_statresp(::communication::Response_StatsResponse* statresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete statresp_;
  }
  if (statresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(statresp);
    if (message_arena != submessage_arena) {
      statresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statresp, submessage_arena);
    }
    
  } else {
    
  }
  statresp_ = statresp;
  // @@protoc_insertion_point(field_set_allocated:communication.Response.statResp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::communication::Request_TypeOfRequest> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::communication::Request_TypeOfRequest>() {
  return ::communication::Request_TypeOfRequest_descriptor();
}
template <> struct is_proto_enum< ::communication::Response_TypeOfResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::communication::Response_TypeOfResponse>() {
  return ::communication::Response_TypeOfResponse_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
